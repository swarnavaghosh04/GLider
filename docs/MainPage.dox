/**
 * @mainpage GLider - OpenGL C++ Class Abstraction
 * 
 * [![GitHub release (latest by date)](https://img.shields.io/github/v/release/swarnavaghosh04/GLider)](https://github.com/swarnavaghosh04/GLider/releases/latest)
 * [![GitHub](https://img.shields.io/github/license/swarnavaghosh04/GLider)](https://github.com/swarnavaghosh04/GLider/blob/main/LICENSE)
 * 
 * @author Swarnava Ghosh
 * 
 * @tableofcontents
 * 
 * @section intro_sec Introduction
 * 
 * GLider is an OpenGL class abstraction library. It uses
 * [glad](https://glad.dav1d.de/) to load the OpenGL
 * functions, which can be customized using
 * [CMake](https://cmake.org/cmake/help/latest/).
 * 
 * @section usage_sec Usage
 * 
 * To get the best idea on how to use this library, look at the
 * code for rendering a triangle step by step:
 * 
 * @subsection window Window Creation
 * 
 * Since window management is not part of the OpenGL specifications, this step
 * is left to the user to accomplish. Good window managemenent libraries include
 * [GLFW](https://www.glfw.org/) and [SDL](https://www.libsdl.org/)
 * 
 * @subsection context Acquire OpenGL Context
 * 
 * An OpenGL context must be acquired before initializing GLider. Since context
 * creation is not part of OpenGL specifications, it is not part GLider.
 * Normally, your window managerment library will provide functions to get this context.
 * 
 *      // GLFW
 *      glfwMakeContextCurrent(window);
 *      
 *      // SDL
 *      SDL_GL_CreateContext(window);
 * 
 * @subsection glider_init Initialize GLider
 * 
 * Once you have the OpenGL context, we can initiate GLider. If you have a
 * function that retrives OpenGL functions, you can pass this as an argument.
 * Again, that OpenGL function getter may be provided to you by your window
 * managment library.
 * 
 * @snippet docs/init.dox Init GLider
 * 
 * @subsection shader_sources Shader Sources
 * @snippet test/triangle.cpp Shader Sources
 * 
 * This is the OpenGL shader source code. You can define a string, or you can
 * write it in a seperate file.
 * 
 * @subsection var_decl Glider Variable Declarations
 * @snippet test/triangle.cpp GLider Variable Declarations
 * 
 * Declares variables using GLider classes
 * 
 * @subsection vertices Vertex Data
 * @snippet test/triangle.cpp Vertices
 * 
 * Vertex data can be specified using any C++ standard container, as long as the
 * containers have `data()` and `size()` member functions.
 * 
 * @subsection store_to_vram Storing Vertex Data in VRAM
 * @snippet test/triangle.cpp Store Data in VRAM
 * 
 * These lines are responsible for feeding the vertex data to OpenGL and telling
 * it how to interpret the data. The first thing that needs to be done is to
 * feed the data into a vertex buffer (through a gli::Buffer<gli::VertexBuffer>
 * object). Once that is done, a vertex array is supposed to read and make sense
 * of the data. For this, we need to specify the structure of the data using an
 * array (or vector) of gli::LayoutElement objects.
 * 
 * @subsection ver_attrib_loc Vertex Attribute Locations
 * @snippet test/triangle.cpp Vertex Attribute Locations
 * 
 * We need to specify the appropriate vertex attribute locations so that the
 * shader can find those attributes. This step is not necessary if you decide to
 * use the `layout` qualifier within your shader source code.
 * 
 * @subsection shader_comp Shader Compilation
 * @snippet test/triangle.cpp Shader Compilation
 * 
 * A lot of the OpenGL shader compilation procedures are automated through
 * GLider. If you wrote your source code in a seperate file, you can use
 * @ref gli::ShaderProgram::compileFile(ShaderType, const char*) instead of @ref
 * gli::ShaderProgram::compileString(ShaderType, const char*).
 * 
 * @subsection ensure_bind Binding
 * @snippet test/triangle.cpp Ensure Bind
 * 
 * These lines just ensure that the correct objects are bound for OpenGl to read
 * from.
 * 
 * @subsection render Render Loop
 * @snippet test/triangle.cpp Draw
 * 
 * Once all the variables are set, we can loop through this piece of code to
 * render triangle. It clears the color and depth buffers, and
 * draws the shape described by the data we spent so long organizing for OpenGL.
 * 
 * @subsection Buffer Swap
 * 
 * To actually update the contents of the screen, we must update the view
 * buffer. This is not part of OpenGL specifications, and thus is left out of
 * GLider. Your window management library should have some feature to swap the buffers.
 * 
 * @snippet docs/init.dox swap
 * 
 * @subsection event_handling Event Handling
 * 
 * In the main render loop, after the drawing and swapping, comes your event
 * handling code, which is again not the concern of OpenGL.
 * 
 * @subsection together Everything Together
 * 
 * The following code does exactly what the above section does, with SDL as the
 * window management library. Note that there is a seperate piece of helper code
 * outside of view that makes managing SDL easier.
 * 
 * @include test/triangle.cpp
*/